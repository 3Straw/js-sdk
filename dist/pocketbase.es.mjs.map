{"version":3,"file":"pocketbase.es.mjs","sources":["../src/ClientResponseError.ts","../src/stores/utils/JWT.ts","../src/stores/BaseAuthStore.ts","../src/models/utils/BaseModel.ts","../src/models/Record.ts","../src/models/User.ts","../src/models/Admin.ts","../src/stores/LocalAuthStore.ts","../src/services/utils/BaseService.ts","../src/services/Settings.ts","../src/models/utils/ListResult.ts","../src/services/utils/BaseCrudService.ts","../src/services/utils/CrudService.ts","../src/services/Admins.ts","../src/services/Users.ts","../src/models/utils/SchemaField.ts","../src/models/Collection.ts","../src/services/Collections.ts","../src/services/Records.ts","../src/services/utils/SubCrudService.ts","../src/models/LogRequest.ts","../src/services/Logs.ts","../src/services/Realtime.ts","../src/Client.ts"],"sourcesContent":["/**\n * ClientResponseError is a custom Error class that is intended to wrap\n * and normalize any error thrown by `Client.send()`.\n */\nexport default class ClientResponseError extends Error {\n    url: string                = '';\n    status: number             = 0;\n    data: {[key: string]: any} = {};\n    isAbort:  boolean          = false;\n    originalError: any         = null;\n\n    constructor(errData?: any) {\n        super(\"ClientResponseError\");\n\n        if (errData instanceof Error && !(errData instanceof this.constructor)) {\n            this.originalError = errData;\n        }\n\n        if (errData !== null && typeof errData === 'object') {\n            this.url    = typeof errData.url === 'string' ? errData.url : '';\n            this.status = typeof errData.status === 'number' ? errData.status : 0;\n            this.data   = errData.data !== null && typeof errData.data === 'object' ? errData.data : {};\n        }\n\n        if (typeof DOMException !== 'undefined' && errData instanceof DOMException) {\n            this.isAbort = true;\n        }\n\n        this.name = \"ClientResponseError \" + this.status;\n        this.message = this.data?.message || 'Something went wrong while processing your request.'\n    }\n\n    // Make a POJO's copy of the current error class instance.\n    // @see https://github.com/vuex-orm/vuex-orm/issues/255\n    toJSON () {\n        return { ...this };\n    }\n}\n","let atobPolyfill: Function;\nif (typeof atob === 'function') {\n    atobPolyfill = atob\n} else {\n    atobPolyfill = (a: any) => Buffer.from(a, 'base64').toString('binary');\n}\n\nexport default class JWT {\n    /**\n     * Returns JWT token's payload data.\n     */\n    static getPayload(token: string): { [key: string]: any } {\n        if (token) {\n            try {\n\n                let base64 = decodeURIComponent(atobPolyfill(token.split('.')[1]).split('').map(function (c: string) {\n                    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n                }).join(''));\n\n                return JSON.parse(base64) || {};\n            } catch (e) {\n            }\n        }\n\n        return {};\n    }\n\n    /**\n     * Checks whether a JWT token is expired or not.\n     * Tokens without `exp` payload key are considered valid.\n     * Tokens with empty payload (eg. invalid token strings) are considered expired.\n     *\n     * @param token The token to check.\n     * @param [expirationThreshold] Time in seconds that will be substracted from the token `exp` property.\n     */\n    static isExpired(token: string, expirationThreshold = 0): boolean {\n        let payload = JWT.getPayload(token);\n\n        if (\n            Object.keys(payload).length > 0 &&\n            (!payload.exp || (payload.exp - expirationThreshold) > (Date.now() / 1000))\n        ) {\n            return false;\n        }\n\n        return true;\n    }\n}\n","import { AuthStore } from '@/stores/utils/AuthStore';\nimport JWT           from '@/stores/utils/JWT';\nimport User          from '@/models/User';\nimport Admin         from '@/models/Admin';\n\ntype onChangeFunc = (token: string, model: User | Admin | {}) => void;\n\n/**\n * Base AuthStore class that is intented to be extended by all other\n * PocketBase AuthStore implementations.\n */\nexport default abstract class BaseAuthStore implements AuthStore {\n    protected baseToken: string = '';\n    protected baseModel: User | Admin | {} = {};\n\n    private _onChangeCallbacks: Array<onChangeFunc> = [];\n\n    /**\n     * Retrieves the stored token (if any).\n     */\n    get token(): string {\n        return this.baseToken;\n    }\n\n    /**\n     * Retrieves the stored model data (if any).\n     */\n    get model(): User | Admin | {} {\n        return this.baseModel;\n    }\n\n    /**\n     * Checks if the store has valid (aka. existing and unexpired) token.\n     */\n    get isValid(): boolean {\n        return !JWT.isExpired(this.token);\n    }\n\n    /**\n     * Saves the provided new token and model data in the auth store.\n     */\n    save(token: string, model: User | Admin | {}): void {\n        this.baseToken = token;\n        this.baseModel = model;\n        this.triggerChange();\n    }\n\n    /**\n     * Removes the stored token and model data form the auth store.\n     */\n    clear(): void {\n        this.baseToken = '';\n        this.baseModel = {};\n        this.triggerChange();\n    }\n\n    /**\n     * Register a callback function that will be called on store change.\n     *\n     * Returns a removal function that you could call to \"unsubscibe\" from the changes.\n     */\n    onChange(callback: () => void): () => void {\n        this._onChangeCallbacks.push(callback);\n\n        return () => {\n            for (let i = this._onChangeCallbacks.length - 1; i >= 0; i--) {\n                if (this._onChangeCallbacks[i] == callback) {\n                    delete this._onChangeCallbacks[i];    // removes the function reference\n                    this._onChangeCallbacks.splice(i, 1); // reindex the array\n                    return;\n                }\n            }\n        }\n    }\n\n    protected triggerChange(): void {\n        for (const callback of this._onChangeCallbacks) {\n            callback && callback(this.token, this.model);\n        }\n    }\n}\n","export default abstract class BaseModel {\n    id!:      string;\n    created!: string;\n    updated!: string;\n\n    constructor(data: { [key: string]: any } = {}) {\n        this.load(data || {});\n    }\n\n    /**\n     * Loads `data` into the current model.\n     */\n    load(data: { [key: string]: any }) {\n        this.id = typeof data.id !== 'undefined' ? data.id : '';\n        this.created = typeof data.created !== 'undefined' ? data.created : '';\n        this.updated = typeof data.updated !== 'undefined' ? data.updated : '';\n    }\n\n    /**\n     * Returns whether the current loaded data represent a stored db record.\n     */\n    get isNew(): boolean {\n        return (\n            // id is not set\n            !this.id ||\n            // zero uuid value\n            this.id === '00000000-0000-0000-0000-000000000000'\n        );\n    }\n\n    /**\n     * Robust deep clone of a model.\n     */\n    clone(): BaseModel {\n        return new (this.constructor as any)(JSON.parse(JSON.stringify(this)));\n    }\n\n    /**\n     * Exports all model properties as a new plain object.\n     */\n    export(): { [key: string]: any } {\n        return Object.assign({}, this);\n    }\n}\n","import BaseModel from '@/models/utils/BaseModel';\n\nexport default class Record extends BaseModel {\n    [key: string]: any,\n\n    '@collectionId'!:   string;\n    '@collectionName'!: string;\n    '@expand'!:         {[key: string]: any};\n\n    /**\n     * @inheritdoc\n     */\n    load(data: { [key: string]: any }) {\n        super.load(data);\n\n        for (const [key, value] of Object.entries(data)) {\n            this[key] = value;\n        }\n\n        // normalize common fields\n        this['@collectionId']   = typeof data['@collectionId']   !== 'undefined' ? data['@collectionId']   : '';\n        this['@collectionName'] = typeof data['@collectionName'] !== 'undefined' ? data['@collectionName'] : '';\n        this['@expand']         = typeof data['@expand']         !== 'undefined' ? data['@expand']         : {};\n    }\n}\n","import BaseModel from '@/models/utils/BaseModel';\nimport Record    from '@/models/Record';\n\nexport default class User extends BaseModel {\n    email!:                  string;\n    verified!:               boolean;\n    lastResetSentAt!:        string;\n    lastVerificationSentAt!: string;\n    profile!:                null|Record;\n\n    /**\n     * @inheritdoc\n     */\n    load(data: { [key: string]: any }) {\n        super.load(data);\n\n        this.email = typeof data.email === 'string' ? data.email : '';\n        this.verified = !!data.verified;\n        this.lastResetSentAt = typeof data.lastResetSentAt === 'string' ? data.lastResetSentAt : '';\n        this.lastVerificationSentAt = typeof data.lastVerificationSentAt === 'string' ? data.lastVerificationSentAt : '';\n        this.profile = data.profile ? new Record(data.profile) : null;\n    }\n}\n","import BaseModel from '@/models/utils/BaseModel';\n\nexport default class Admin extends BaseModel {\n    avatar!:          number;\n    email!:           string;\n    lastResetSentAt!: string;\n\n    /**\n     * @inheritdoc\n     */\n    load(data: { [key: string]: any }) {\n        super.load(data);\n\n        this.avatar = typeof data.avatar === 'number' ? data.avatar : 0;\n        this.email  = typeof data.email  === 'string' ? data.email  : '';\n        this.lastResetSentAt = typeof data.lastResetSentAt === 'string' ? data.lastResetSentAt : '';\n    }\n}\n","import BaseAuthStore from '@/stores/BaseAuthStore';\nimport User          from '@/models/User';\nimport Admin         from '@/models/Admin';\n\n/**\n * The default token store for browsers with auto fallback\n * to runtime/memory if local storage is undefined (eg. in node env).\n */\nexport default class LocalAuthStore extends BaseAuthStore {\n    private fallback: { [key: string]: any } = {};\n    private storageKey: string\n\n    constructor(storageKey = \"pocketbase_auth\") {\n        super();\n\n        this.storageKey = storageKey;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get token(): string {\n        const data = this._storageGet(this.storageKey) || {};\n\n        return data.token || '';\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get model(): User | Admin | {} {\n        const data = this._storageGet(this.storageKey) || {};\n\n        if (\n            data === null ||\n            typeof data !== 'object' ||\n            data.model === null ||\n            typeof data.model !== 'object'\n        ) {\n            return {};\n        }\n\n        // admins don't have `verified` prop\n        if (typeof data.model?.verified !== 'undefined') {\n            return new User(data.model);\n        }\n\n        return new Admin(data.model);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    save(token: string, model: User | Admin | {}) {\n        this._storageSet(this.storageKey, {\n            'token': token,\n            'model': model,\n        });\n\n        super.save(token, model);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    clear() {\n        this._storageRemove(this.storageKey);\n\n        super.clear();\n    }\n\n    // ---------------------------------------------------------------\n    // Internal helpers:\n    // ---------------------------------------------------------------\n\n    /**\n     * Retrieves `key` from the browser's local storage\n     * (or runtime/memory if local storage is undefined).\n     */\n    private _storageGet(key: string): any {\n        if (typeof window !== 'undefined' && window?.localStorage) {\n            const rawValue = window?.localStorage?.getItem(key) || '';\n            try {\n                return JSON.parse(rawValue);\n            } catch (e) { // not a json\n                return rawValue;\n            }\n        }\n\n        // fallback to runtime/memory\n        return this.fallback[key];\n    }\n\n    /**\n     * Stores a new data in the browser's local storage\n     * (or runtime/memory if local storage is undefined).\n     */\n    private _storageSet(key: string, value: any) {\n        if (typeof window !== 'undefined' && window?.localStorage) {\n            // store in local storage\n            let normalizedVal = value;\n            if (typeof value !== 'string') {\n                normalizedVal = JSON.stringify(value);\n            }\n            window?.localStorage?.setItem(key, normalizedVal);\n        } else {\n            // store in runtime/memory\n            this.fallback[key] = value;\n        }\n    }\n\n    /**\n     * Removes `key` from the browser's local storage and the runtime/memory.\n     */\n    private _storageRemove(key: string) {\n        // delete from local storage\n        if (typeof window !== 'undefined') {\n            window?.localStorage?.removeItem(key);\n        }\n\n        // delete from runtime/memory\n        delete this.fallback[key];\n    }\n}\n","import Client from '@/Client';\n\n/**\n * BaseService class that should be inherited from all API services.\n */\nexport default abstract class BaseService {\n    readonly client: Client\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n}\n","import BaseService from '@/services/utils/BaseService';\n\nexport default class Settings extends BaseService {\n    /**\n     * Fetch all available app settings.\n     */\n    getAll(queryParams = {}): Promise<{ [key: string]: any }> {\n        return this.client.send('/api/settings', {\n            'method': 'GET',\n            'params': queryParams,\n        }).then((responseData) => responseData || {});\n    }\n\n    /**\n     * Bulk updates app settings.\n     */\n    update(bodyParams = {}, queryParams = {}): Promise<{ [key: string]: any }> {\n        return this.client.send('/api/settings', {\n            'method': 'PATCH',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then((responseData) => responseData || {});\n    }\n}\n","import BaseModel from './BaseModel';\n\nexport default class ListResult<M extends BaseModel> {\n    page!: number;\n    perPage!: number;\n    totalItems!: number;\n    totalPages!: number;\n    items!: Array<M>;\n\n    constructor(\n        page: number,\n        perPage: number,\n        totalItems: number,\n        totalPages: number,\n        items: Array<M>,\n    ) {\n        this.page = page > 0 ? page : 1;\n        this.perPage = perPage >= 0 ? perPage : 0;\n        this.totalItems = totalItems >= 0 ? totalItems : 0;\n        this.totalPages = totalPages >= 0 ? totalPages : 0;\n        this.items = items || [];\n    }\n}\n","import BaseModel   from '@/models/utils/BaseModel';\nimport ListResult  from '@/models/utils/ListResult';\nimport BaseService from '@/services/utils/BaseService';\n\nexport default abstract class BaseCrudService<M extends BaseModel> extends BaseService {\n    /**\n     * Response data decoder.\n     */\n    abstract decode(data: { [key: string]: any }): M\n\n    /**\n     * Returns a promise with all list items batch fetched at once.\n     */\n    protected _getFullList(basePath: string, batchSize = 100, queryParams = {}): Promise<Array<M>> {\n        var result: Array<M> = [];\n\n        let request = async (page: number): Promise<Array<any>> => {\n            return this._getList(basePath, page, batchSize, queryParams).then((list) => {\n                const castedList = (list as ListResult<M>);\n                const items = castedList.items;\n                const totalItems = castedList.totalItems;\n\n                result = result.concat(items);\n\n                if (items.length && totalItems > result.length) {\n                    return request(page + 1);\n                }\n\n                return result;\n            });\n        }\n\n        return request(1);\n    }\n\n    /**\n     * Returns paginated items list.\n     */\n    protected _getList(basePath: string, page = 1, perPage = 30, queryParams = {}): Promise<ListResult<M>> {\n        queryParams = Object.assign({\n            'page':    page,\n            'perPage': perPage,\n        }, queryParams);\n\n        return this.client.send(basePath, {\n            'method': 'GET',\n            'params': queryParams,\n        }).then((responseData: any) => {\n            const items: Array<M> = [];\n            if (responseData?.items) {\n                responseData.items = responseData.items || [];\n                for (const item of responseData.items) {\n                    items.push(this.decode(item));\n                }\n            }\n\n            return new ListResult<M>(\n                responseData?.page || 1,\n                responseData?.perPage || 0,\n                responseData?.totalItems || 0,\n                responseData?.totalPages || 0,\n                items,\n            );\n        });\n    }\n\n    /**\n     * Returns single item by its id.\n     */\n    protected _getOne(basePath: string, id: string, queryParams = {}): Promise<M> {\n        return this.client.send(basePath + '/' + encodeURIComponent(id), {\n            'method': 'GET',\n            'params': queryParams\n        }).then((responseData: any) => this.decode(responseData));\n    }\n\n    /**\n     * Creates a new item.\n     */\n    protected _create(basePath: string, bodyParams = {}, queryParams = {}): Promise<M> {\n        return this.client.send(basePath, {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then((responseData: any) => this.decode(responseData));\n    }\n\n    /**\n     * Updates an existing item by its id.\n     */\n    protected _update(basePath: string, id: string, bodyParams = {}, queryParams = {}): Promise<M> {\n        return this.client.send(basePath + '/' + encodeURIComponent(id), {\n            'method': 'PATCH',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then((responseData: any) => this.decode(responseData));\n    }\n\n    /**\n     * Deletes an existing item by its id.\n     */\n    protected _delete(basePath: string, id: string, queryParams = {}): Promise<boolean> {\n        return this.client.send(basePath + '/' + encodeURIComponent(id), {\n            'method': 'DELETE',\n            'params': queryParams,\n        }).then(() => true);\n    }\n}\n","import ListResult      from '@/models/utils/ListResult';\nimport BaseModel       from '@/models/utils/BaseModel';\nimport BaseCrudService from '@/services/utils/BaseCrudService';\n\nexport default abstract class CrudService<M extends BaseModel> extends BaseCrudService<M> {\n    /**\n     * Base path for the crud actions (without trailing slash, eg. '/admins').\n     */\n    abstract baseCrudPath(): string\n\n    /**\n     * Returns a promise with all list items batch fetched at once.\n     */\n    getFullList(batchSize = 100, queryParams = {}): Promise<Array<M>> {\n        return this._getFullList(this.baseCrudPath(), batchSize, queryParams);\n    }\n\n    /**\n     * Returns paginated items list.\n     */\n    getList(page = 1, perPage = 30, queryParams = {}): Promise<ListResult<M>> {\n        return this._getList(this.baseCrudPath(), page, perPage, queryParams);\n    }\n\n    /**\n     * Returns single item by its id.\n     */\n    getOne(id: string, queryParams = {}): Promise<M> {\n        return this._getOne(this.baseCrudPath(), id, queryParams);\n    }\n\n    /**\n     * Creates a new item.\n     */\n    create(bodyParams = {}, queryParams = {}): Promise<M> {\n        return this._create(this.baseCrudPath(), bodyParams, queryParams);\n    }\n\n    /**\n     * Updates an existing item by its id.\n     */\n    update(id: string, bodyParams = {}, queryParams = {}): Promise<M> {\n        return this._update(this.baseCrudPath(), id, bodyParams, queryParams);\n    }\n\n    /**\n     * Deletes an existing item by its id.\n     */\n    delete(id: string, queryParams = {}): Promise<boolean> {\n        return this._delete(this.baseCrudPath(), id, queryParams);\n    }\n}\n","import CrudService from '@/services/utils/CrudService';\nimport Admin       from '@/models/Admin';\n\nexport type AdminAuthResponse = {\n    [key: string]: any,\n    token: string,\n    admin: Admin,\n}\n\nexport default class Admins extends CrudService<Admin> {\n    /**\n     * @inheritdoc\n     */\n    decode(data: { [key: string]: any }): Admin {\n        return new Admin(data);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    baseCrudPath(): string {\n        return '/api/admins';\n    }\n\n    /**\n     * Prepare successful authorize response.\n     */\n    protected authResponse(responseData: any): AdminAuthResponse {\n        const admin = this.decode(responseData?.admin || {});\n\n        if (responseData?.token && responseData?.admin) {\n            this.client.authStore.save(responseData.token, admin);\n        }\n\n        return Object.assign({}, responseData, {\n            // normalize common fields\n            'token': responseData?.token || '',\n            'admin': admin,\n        });\n    }\n\n    /**\n     * Authenticate an admin account by its email and password\n     * and returns a new admin token and data.\n     *\n     * On success this method automatically updates the client's AuthStore data.\n     */\n    authViaEmail(\n        email: string,\n        password: string,\n        bodyParams = {},\n        queryParams = {},\n    ): Promise<AdminAuthResponse> {\n        bodyParams = Object.assign({\n            'email':    email,\n            'password': password,\n        }, bodyParams);\n\n        return this.client.send(this.baseCrudPath() + '/auth-via-email', {\n            'method':  'POST',\n            'params':  queryParams,\n            'body':    bodyParams,\n            'headers': {\n                'Authorization': '',\n            },\n        }).then(this.authResponse.bind(this));\n    }\n\n    /**\n     * Refreshes the current admin authenticated instance and\n     * returns a new token and admin data.\n     *\n     * On success this method automatically updates the client's AuthStore data.\n     */\n    refresh(bodyParams = {}, queryParams = {}): Promise<AdminAuthResponse> {\n        return this.client.send(this.baseCrudPath() + '/refresh', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(this.authResponse.bind(this));\n    }\n\n    /**\n     * Sends admin password reset request.\n     */\n    requestPasswordReset(\n        email: string,\n        bodyParams = {},\n        queryParams = {},\n    ): Promise<boolean> {\n        bodyParams = Object.assign({\n            'email': email,\n        }, bodyParams);\n\n        return this.client.send(this.baseCrudPath() + '/request-password-reset', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Confirms admin password reset request.\n     */\n    confirmPasswordReset(\n        passwordResetToken: string,\n        password: string,\n        passwordConfirm: string,\n        bodyParams = {},\n        queryParams = {},\n    ): Promise<AdminAuthResponse> {\n        bodyParams = Object.assign({\n            'token':           passwordResetToken,\n            'password':        password,\n            'passwordConfirm': passwordConfirm,\n        }, bodyParams);\n\n        return this.client.send(this.baseCrudPath() + '/confirm-password-reset', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(this.authResponse.bind(this));\n    }\n}\n","import CrudService from '@/services/utils/CrudService';\nimport User        from '@/models/User';\n\nexport type UserAuthResponse = {\n    [key: string]: any,\n    token:         string,\n    user:          User,\n}\n\nexport type AuthProviderInfo = {\n    name:                string,\n    state:               string,\n    codeVerifier:        string,\n    codeChallenge:       string,\n    codeChallengeMethod: string,\n    authUrl:             string,\n}\n\nexport type AuthMethodsList = {\n    [key: string]: any,\n    emailPassword: boolean,\n    authProviders: Array<AuthProviderInfo>,\n}\n\nexport default class Users extends CrudService<User> {\n    /**\n     * @inheritdoc\n     */\n    decode(data: { [key: string]: any }): User {\n        return new User(data);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    baseCrudPath(): string {\n        return '/api/users';\n    }\n\n    /**\n     * Prepare successful authorization response.\n     */\n    protected authResponse(responseData: any): UserAuthResponse {\n        const user = this.decode(responseData?.user || {});\n\n        if (responseData?.token && responseData?.user) {\n            this.client.authStore.save(responseData.token, user);\n        }\n\n        return Object.assign({}, responseData, {\n            // normalize common fields\n            'token': responseData?.token || '',\n            'user':  user,\n        });\n    }\n\n    /**\n     * Returns all available application auth methods.\n     */\n    listAuthMethods(queryParams = {}): Promise<AuthMethodsList> {\n        return this.client.send(this.baseCrudPath() + '/auth-methods', {\n            'method': 'GET',\n            'params': queryParams,\n        }).then((responseData: any) => {\n            return Object.assign({}, responseData, {\n                // normalize common fields\n                'emailPassword':  !!responseData?.emailPassword,\n                'authProviders': Array.isArray(responseData?.authProviders) ? responseData?.authProviders : [],\n            });\n        });\n    }\n\n    /**\n     * Authenticate a user via its email and password.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - new user authentication token\n     * - the authenticated user model record\n     */\n    authViaEmail(\n        email: string,\n        password: string,\n        bodyParams = {},\n        queryParams = {},\n    ): Promise<UserAuthResponse> {\n        bodyParams = Object.assign({\n            'email':    email,\n            'password': password,\n        }, bodyParams);\n\n        return this.client.send(this.baseCrudPath() + '/auth-via-email', {\n            'method':  'POST',\n            'params':  queryParams,\n            'body':    bodyParams,\n            'headers': {\n                'Authorization': '',\n            },\n        }).then(this.authResponse.bind(this));\n    }\n\n    /**\n     * Authenticate a user via OAuth2 client provider.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - new user authentication token\n     * - the authenticated user model record\n     * - the OAuth2 user profile data (eg. name, email, avatar, etc.)\n     */\n    authViaOAuth2(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectUrl: string,\n        bodyParams = {},\n        queryParams = {},\n    ): Promise<UserAuthResponse> {\n        bodyParams = Object.assign({\n            'provider':     provider,\n            'code':         code,\n            'codeVerifier': codeVerifier,\n            'redirectUrl':  redirectUrl,\n        }, bodyParams);\n\n        return this.client.send(this.baseCrudPath() + '/auth-via-oauth2', {\n            'method':  'POST',\n            'params':  queryParams,\n            'body':    bodyParams,\n            'headers': {\n                'Authorization': '',\n            },\n        }).then(this.authResponse.bind(this));\n    }\n\n    /**\n     * Refreshes the current user authenticated instance and\n     * returns a new token and user data.\n     *\n     * On success this method also automatically updates the client's AuthStore data.\n     */\n    refresh(bodyParams = {}, queryParams = {}): Promise<UserAuthResponse> {\n        return this.client.send(this.baseCrudPath() + '/refresh', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(this.authResponse.bind(this));\n    }\n\n    /**\n     * Sends user password reset request.\n     */\n    requestPasswordReset(\n        email: string,\n        bodyParams  = {},\n        queryParams = {},\n    ): Promise<boolean> {\n        bodyParams = Object.assign({\n            'email': email,\n        }, bodyParams);\n\n        return this.client.send(this.baseCrudPath() + '/request-password-reset', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Confirms user password reset request.\n     */\n    confirmPasswordReset(\n        passwordResetToken: string,\n        password: string,\n        passwordConfirm: string,\n        bodyParams = {},\n        queryParams = {},\n    ): Promise<UserAuthResponse> {\n        bodyParams = Object.assign({\n            'token':           passwordResetToken,\n            'password':        password,\n            'passwordConfirm': passwordConfirm,\n        }, bodyParams);\n\n        return this.client.send(this.baseCrudPath() + '/confirm-password-reset', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(this.authResponse.bind(this));\n    }\n\n    /**\n     * Sends user verification email request.\n     */\n    requestVerification(\n        email: string,\n        bodyParams = {},\n        queryParams = {},\n    ): Promise<boolean> {\n        bodyParams = Object.assign({\n            'email': email,\n        }, bodyParams);\n\n        return this.client.send(this.baseCrudPath() + '/request-verification', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Confirms user email verification request.\n     */\n    confirmVerification(\n        verificationToken: string,\n        bodyParams  = {},\n        queryParams = {},\n    ): Promise<UserAuthResponse> {\n        bodyParams = Object.assign({\n            'token': verificationToken,\n        }, bodyParams);\n\n        return this.client.send(this.baseCrudPath() + '/confirm-verification', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(this.authResponse.bind(this));\n    }\n\n    /**\n     * Sends an email change request to the authenticated user.\n     */\n    requestEmailChange(\n        newEmail: string,\n        bodyParams = {},\n        queryParams = {},\n    ): Promise<boolean> {\n        bodyParams = Object.assign({\n            'newEmail': newEmail,\n        }, bodyParams);\n\n        return this.client.send(this.baseCrudPath() + '/request-email-change', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Confirms user new email address.\n     */\n    confirmEmailChange(\n        emailChangeToken: string,\n        password: string,\n        bodyParams  = {},\n        queryParams = {},\n    ): Promise<UserAuthResponse> {\n        bodyParams = Object.assign({\n            'token': emailChangeToken,\n            'password': password,\n        }, bodyParams);\n\n        return this.client.send(this.baseCrudPath() + '/confirm-email-change', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(this.authResponse.bind(this));\n    }\n}\n","export default class SchemaField {\n    id!:       string;\n    name!:     string;\n    type!:     string;\n    system!:   boolean;\n    required!: boolean;\n    unique!:   boolean;\n    options!:  { [key: string]: any };\n\n    constructor(data: { [key: string]: any } = {}) {\n        this.load(data || {});\n    }\n\n    /**\n     * Loads `data` into the field.\n     */\n    load(data: { [key: string]: any }) {\n        this.id       = typeof data.id !== 'undefined' ? data.id : '';\n        this.name     = typeof data.name !== 'undefined' ? data.name : '';\n        this.type     = typeof data.type !== 'undefined' ? data.type : 'text';\n        this.system   = !!data.system;\n        this.required = !!data.required;\n        this.unique   = !!data.unique;\n        this.options  = typeof data.options === 'object' && data.options !== null ? data.options : {};\n    }\n}\n","import BaseModel   from '@/models/utils/BaseModel';\nimport SchemaField from '@/models/utils/SchemaField';\n\nexport default class Collection extends BaseModel {\n    name!:       string;\n    schema!:     Array<SchemaField>;\n    system!:     boolean;\n    listRule!:   null|string;\n    viewRule!:   null|string;\n    createRule!: null|string;\n    updateRule!: null|string;\n    deleteRule!: null|string;\n\n    /**\n     * @inheritdoc\n     */\n    load(data: { [key: string]: any }) {\n        super.load(data);\n\n        this.name   = typeof data.name === 'string' ? data.name : '';\n        this.system = !!data.system;\n\n        // rules\n        this.listRule   = typeof data.listRule   === 'string' ? data.listRule   : null;\n        this.viewRule   = typeof data.viewRule   === 'string' ? data.viewRule   : null;\n        this.createRule = typeof data.createRule === 'string' ? data.createRule : null;\n        this.updateRule = typeof data.updateRule === 'string' ? data.updateRule : null;\n        this.deleteRule = typeof data.deleteRule === 'string' ? data.deleteRule : null;\n\n        // schema\n        data.schema = Array.isArray(data.schema) ? data.schema : [];\n        this.schema = [];\n        for (let field of data.schema) {\n            this.schema.push(new SchemaField(field));\n        }\n    }\n}\n","import CrudService from '@/services/utils/CrudService';\nimport Collection  from '@/models/Collection';\n\nexport default class Collections extends CrudService<Collection> {\n    /**\n     * @inheritdoc\n     */\n    decode(data: { [key: string]: any }): Collection {\n        return new Collection(data);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    baseCrudPath(): string {\n        return '/api/collections';\n    }\n\n    /**\n     * Imports the provided collections.\n     */\n    async import(collections: Array<Collection>, deleteMissing: boolean = true, queryParams = {}): Promise<true> {\n        return this.client.send(this.baseCrudPath() + '/import', {\n            'method': 'PUT',\n            'params': queryParams,\n            'body': {\n                'collections':  collections,\n                'deleteMissing': deleteMissing,\n            }\n        }).then(() => true);\n    }\n}\n","import SubCrudService from '@/services/utils/SubCrudService';\nimport Record         from '@/models/Record';\n\nexport default class Records extends SubCrudService<Record> {\n    /**\n     * @inheritdoc\n     */\n    decode(data: { [key: string]: any }): Record {\n        return new Record(data);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    baseCrudPath(collectionIdOrName: string): string {\n        return '/api/collections/' + encodeURIComponent(collectionIdOrName) + '/records';\n    }\n\n    /**\n     * Builds and returns an absolute record file url.\n     */\n    getFileUrl(record: Record, filename: string, queryParams = {}): string {\n        const parts = [];\n        parts.push(this.client.baseUrl.replace(/\\/+$/gm, \"\"))\n        parts.push(\"api\")\n        parts.push(\"files\")\n        parts.push(record[\"@collectionId\"])\n        parts.push(record.id)\n        parts.push(filename)\n        let result = parts.join('/');\n\n        if (Object.keys(queryParams).length) {\n            const params = new URLSearchParams(queryParams);\n            result += (result.includes(\"?\") ? \"&\" : \"?\") + params;\n        }\n\n        return result\n    }\n}\n","import BaseModel       from '@/models/utils/BaseModel';\nimport ListResult      from '@/models/utils/ListResult';\nimport BaseCrudService from '@/services/utils/BaseCrudService';\n\nexport default abstract class SubCrudService<M extends BaseModel> extends BaseCrudService<M> {\n    /**\n     * Base path for the crud actions (without trailing slash, eg. '/collections/{:sub}/records').\n     */\n    abstract baseCrudPath(sub: string): string\n\n    /**\n     * Returns a promise with all list items batch fetched at once.\n     */\n    getFullList(sub: string, batchSize = 100, queryParams = {}): Promise<Array<M>> {\n        return this._getFullList(this.baseCrudPath(sub), batchSize, queryParams);\n    }\n\n    /**\n     * Returns paginated items list.\n     */\n    getList(sub: string, page = 1, perPage = 30, queryParams = {}): Promise<ListResult<M>> {\n        return this._getList(this.baseCrudPath(sub), page, perPage, queryParams);\n    }\n\n    /**\n     * Returns single item by its id.\n     */\n    getOne(sub: string, id: string, queryParams = {}): Promise<M> {\n        return this._getOne(this.baseCrudPath(sub), id, queryParams);\n    }\n\n    /**\n     * Creates a new item.\n     */\n    create(sub: string, bodyParams = {}, queryParams = {}): Promise<M> {\n        return this._create(this.baseCrudPath(sub), bodyParams, queryParams);\n    }\n\n    /**\n     * Updates an existing item by its id.\n     */\n    update(sub: string, id: string, bodyParams = {}, queryParams = {}): Promise<M> {\n        return this._update(this.baseCrudPath(sub), id, bodyParams, queryParams);\n    }\n\n    /**\n     * Deletes an existing item by its id.\n     */\n    delete(sub: string, id: string, queryParams = {}): Promise<boolean> {\n        return this._delete(this.baseCrudPath(sub), id, queryParams);\n    }\n}\n","import BaseModel from '@/models/utils/BaseModel';\n\nexport default class LogRequest extends BaseModel {\n    url!:       string;\n    method!:    string;\n    status!:    number;\n    auth!:      string;\n    ip!:        string;\n    referer!:   string;\n    userAgent!: string;\n    meta!:      null|{ [key: string]: any };\n\n    /**\n     * @inheritdoc\n     */\n    load(data: { [key: string]: any }) {\n        super.load(data);\n\n        this.url       = typeof data.url === 'string' ? data.url : '';\n        this.method    = typeof data.method === 'string' ? data.method : 'GET';\n        this.status    = typeof data.status === 'number' ? data.status : 200;\n        this.auth      = typeof data.auth === 'string' ? data.auth : 'guest';\n        this.ip        = typeof data.ip === 'string' ? data.ip : '';\n        this.referer   = typeof data.referer === 'string' ? data.referer : '';\n        this.userAgent = typeof data.userAgent === 'string' ? data.userAgent : '';\n        this.meta      = typeof data.meta === 'object' && data.meta !== null ? data.meta : {};\n    }\n}\n","import LogRequest  from '@/models/LogRequest';\nimport ListResult  from '@/models/utils/ListResult';\nimport BaseService from '@/services/utils/BaseService';\n\nexport type HourlyStats = {\n    total: number,\n    date:  string,\n}\n\nexport default class Logs extends BaseService {\n    /**\n     * Returns paginated logged requests list.\n     */\n    getRequestsList(page = 1, perPage = 30, queryParams = {}): Promise<ListResult<LogRequest>> {\n        queryParams = Object.assign({\n            'page':    page,\n            'perPage': perPage,\n        }, queryParams);\n\n        return this.client.send('/api/logs/requests', {\n            'method': 'GET',\n            'params': queryParams,\n        }).then((responseData: any) => {\n            const items: Array<LogRequest> = [];\n            if (responseData?.items) {\n                responseData.items = responseData?.items || [];\n                for (const item of responseData.items) {\n                    items.push(new LogRequest(item));\n                }\n            }\n\n            return new ListResult<LogRequest>(\n                responseData?.page || 1,\n                responseData?.perPage || 0,\n                responseData?.totalItems || 0,\n                responseData?.totalPages || 0,\n                items,\n            );\n        });\n    }\n\n    /**\n     * Returns a single logged request by its id.\n     */\n    getRequest(id: string, queryParams = {}): Promise<LogRequest> {\n        return this.client.send('/api/logs/requests/' + encodeURIComponent(id), {\n            'method': 'GET',\n            'params': queryParams\n        }).then((responseData: any) => new LogRequest(responseData));\n    }\n\n    /**\n     * Returns request logs statistics.\n     */\n    getRequestsStats(queryParams = {}): Promise<Array<HourlyStats>> {\n        return this.client.send('/api/logs/requests/stats', {\n            'method': 'GET',\n            'params': queryParams\n        }).then((responseData: any) => responseData);\n    }\n}\n","import BaseService from '@/services/utils/BaseService';\nimport Record      from '@/models/Record';\n\nexport interface MessageData {\n    [key: string]: any;\n    action: string;\n    record: Record;\n}\n\nexport interface SubscriptionFunc{\n    (data: MessageData):void;\n}\n\nexport default class Realtime extends BaseService {\n    private clientId: string = \"\";\n    private eventSource: EventSource | null = null;\n    private subscriptions: { [key: string]: EventListener } = {};\n\n    /**\n     * Inits the sse connection (if not already) and register the subscription.\n     */\n    async subscribe(subscription: string, callback: SubscriptionFunc): Promise<void> {\n        if (!subscription) {\n            throw new Error('subscription must be set.')\n        }\n\n        // unsubscribe existing\n        if (this.subscriptions[subscription]) {\n            this.eventSource?.removeEventListener(subscription, this.subscriptions[subscription]);\n        }\n\n        // register subscription\n        this.subscriptions[subscription] = function (e: Event) {\n            const msgEvent = (e as MessageEvent);\n\n            let data;\n            try {\n                data = JSON.parse(msgEvent?.data);\n            } catch {}\n\n            callback(data || {});\n        }\n\n        if (!this.eventSource) {\n            // start a new sse connection\n            this.connect();\n        } else if (this.clientId) {\n            // otherwise - just persist the updated subscriptions\n            await this.submitSubscriptions();\n        }\n    }\n\n    /**\n     * Unsubscribe from a subscription.\n     *\n     * If the `subscription` argument is not set,\n     * then the client will unsubscibe from all registered subscriptions.\n     *\n     * The related sse connection will be autoclosed if after the\n     * unsubscribe operations there are no active subscriptions left.\n     */\n    async unsubscribe(subscription?: string): Promise<void> {\n        if (!subscription) {\n            // remove all subscriptions\n            this.removeSubscriptionListeners();\n            this.subscriptions = {};\n        } else if (this.subscriptions[subscription]) {\n            // remove a single subscription\n            this.eventSource?.removeEventListener(subscription, this.subscriptions[subscription]);\n            delete this.subscriptions[subscription];\n        } else {\n            // not subscribed to the specified subscription\n            return\n        }\n\n        if (this.clientId) {\n            await this.submitSubscriptions();\n        }\n\n        // no more subscriptions -> close the sse connection\n        if (!Object.keys(this.subscriptions).length) {\n            this.disconnect();\n        }\n    }\n\n    private async submitSubscriptions(): Promise<boolean> {\n        // optimistic update\n        this.addSubscriptionListeners();\n\n        return this.client.send('/api/realtime', {\n            'method': 'POST',\n            'body': {\n                'clientId': this.clientId,\n                'subscriptions': Object.keys(this.subscriptions),\n            },\n        }).then(() => true);\n    }\n\n    private addSubscriptionListeners(): void {\n        if (!this.eventSource) {\n            return;\n        }\n\n        this.removeSubscriptionListeners();\n\n        for (let sub in this.subscriptions) {\n            this.eventSource.addEventListener(sub, this.subscriptions[sub]);\n        }\n    }\n\n    private removeSubscriptionListeners(): void {\n        if (!this.eventSource) {\n            return;\n        }\n\n        for (let sub in this.subscriptions) {\n            this.eventSource.removeEventListener(sub, this.subscriptions[sub]);\n        }\n    }\n\n    private connectHandler(e: Event): void {\n        const msgEvent = (e as MessageEvent);\n        this.clientId = msgEvent?.lastEventId;\n        this.submitSubscriptions();\n    }\n\n    private connect(): void {\n        this.disconnect();\n        this.eventSource = new EventSource(this.client.buildUrl('/api/realtime'))\n        this.eventSource.addEventListener('PB_CONNECT', (e) => this.connectHandler(e));\n    }\n\n    private disconnect(): void {\n        this.removeSubscriptionListeners();\n        this.eventSource?.removeEventListener('PB_CONNECT', (e) => this.connectHandler(e));\n        this.eventSource?.close();\n        this.eventSource = null;\n        this.clientId = \"\";\n    }\n}\n","import ClientResponseError from '@/ClientResponseError';\nimport { AuthStore }       from '@/stores/utils/AuthStore';\nimport LocalAuthStore      from '@/stores/LocalAuthStore';\nimport Settings            from '@/services/Settings';\nimport Admins              from '@/services/Admins';\nimport Users               from '@/services/Users';\nimport Collections         from '@/services/Collections';\nimport Records             from '@/services/Records';\nimport Logs                from '@/services/Logs';\nimport Realtime            from '@/services/Realtime';\n\n/**\n * PocketBase JS Client.\n */\nexport default class Client {\n    /**\n     * The base PocketBase backend url address (eg. 'http://127.0.0.1.8090').\n     */\n    baseUrl: string;\n\n    /**\n     * Hook that get triggered right before sending the fetch request,\n     * allowing you to inspect/modify the request config.\n     *\n     * Returns the new modified config that will be used to send the request.\n     *\n     * For list of the possible options check https://developer.mozilla.org/en-US/docs/Web/API/fetch#options\n     *\n     * Example:\n     * ```js\n     * client.beforeSend = function (url, reqConfig) {\n     *     reqConfig.headers = Object.assign(reqConfig.headers, {\n     *         'X-Custom-Header': 'example',\n     *     });\n     *\n     *     return reqConfig;\n     * };\n     * ```\n     */\n    beforeSend?: (url: string, reqConfig: { [key: string]: any }) => { [key: string]: any };\n\n    /**\n     * Hook that get triggered after successfully sending the fetch request,\n     * allowing you to inspect/modify the response object and its parsed data.\n     *\n     * Returns the new Promise resolved `data` that will be returned to the client.\n     *\n     * Example:\n     * ```js\n     * client.afterSend = function (response, data) {\n     *     if (response.status != 200) {\n     *         throw new ClientResponseError({\n     *             url:      response.url,\n     *             status:   response.status,\n     *             data:     data,\n     *         });\n     *     }\n     *\n     *     return data;\n     * };\n     * ```\n     */\n    afterSend?: (response: Response, data: any) => any;\n\n    /**\n     * Optional language code (default to `en-US`) that will be sent\n     * with the requests to the server as `Accept-Language` header.\n     */\n    lang: string;\n\n    /**\n     * A replacable instance of the local `AuthStore` service.\n     */\n    authStore: AuthStore;\n\n    /**\n     * An instance of the service that handles the **Settings APIs**.\n     */\n    readonly settings: Settings;\n\n    /**\n     * An instance of the service that handles the **Admin APIs**.\n     */\n    readonly admins: Admins;\n\n    /**\n     * An instance of the service that handles the **User APIs**.\n     */\n    readonly users: Users;\n\n    /**\n     * An instance of the service that handles the **Collection APIs**.\n     */\n    readonly collections: Collections;\n\n    /**\n     * An instance of the service that handles the **Record APIs**.\n     */\n    readonly records: Records;\n\n    /**\n     * An instance of the service that handles the **Log APIs**.\n     */\n    readonly logs: Logs;\n\n    /**\n     * An instance of the service that handles the **Realtime APIs**.\n     */\n    readonly realtime: Realtime;\n\n    private cancelControllers: { [key: string]: AbortController } = {}\n\n    constructor(\n        baseUrl = '/',\n        lang = 'en-US',\n        authStore?: AuthStore | null,\n    ) {\n        this.baseUrl   = baseUrl;\n        this.lang      = lang;\n        this.authStore = authStore || new LocalAuthStore();\n\n        // services\n        this.admins      = new Admins(this);\n        this.users       = new Users(this);\n        this.records     = new Records(this);\n        this.collections = new Collections(this);\n        this.logs        = new Logs(this);\n        this.settings    = new Settings(this);\n        this.realtime    = new Realtime(this);\n    }\n\n    /**\n     * @deprecated Legacy alias for `this.authStore`.\n     */\n    get AuthStore(): AuthStore {\n        return this.authStore;\n    };\n\n    /**\n     * @deprecated Legacy alias for `this.settings`.\n     */\n    get Settings(): Settings {\n        return this.settings;\n    };\n\n    /**\n     * @deprecated Legacy alias for `this.admins`.\n     */\n    get Admins(): Admins {\n        return this.admins;\n    };\n\n    /**\n     * @deprecated Legacy alias for `this.users`.\n     */\n    get Users(): Users {\n        return this.users;\n    };\n\n    /**\n     * @deprecated Legacy alias for `this.collections`.\n     */\n    get Collections(): Collections {\n        return this.collections;\n    };\n\n    /**\n     * @deprecated Legacy alias for `this.records`.\n     */\n    get Records(): Records {\n        return this.records;\n    };\n\n    /**\n     * @deprecated Legacy alias for `this.logs`.\n     */\n    get Logs(): Logs {\n        return this.logs;\n    };\n\n    /**\n     * @deprecated Legacy alias for `this.realtime`.\n     */\n    get Realtime(): Realtime {\n        return this.realtime;\n    };\n\n    /**\n     * Cancels single request by its cancellation key.\n     */\n    cancelRequest(cancelKey: string): Client {\n        if (this.cancelControllers[cancelKey]) {\n            this.cancelControllers[cancelKey].abort();\n            delete this.cancelControllers[cancelKey];\n        }\n\n        return this;\n    }\n\n    /**\n     * Cancels all pending requests.\n     */\n    cancelAllRequests(): Client {\n        for (let k in this.cancelControllers) {\n            this.cancelControllers[k].abort();\n        }\n\n        this.cancelControllers = {};\n\n        return this;\n    }\n\n    /**\n     * Sends an api http request.\n     */\n    async send(path: string, reqConfig: { [key: string]: any }): Promise<any> {\n        let config = Object.assign({ method: 'GET' } as { [key: string]: any }, reqConfig);\n\n        // serialize the body if needed and set the correct content type\n        // note1: for FormData body the Content-Type header should be skipped\n        // note2: we are checking the constructor name because FormData is not available natively in node\n        if (config.body && config.body.constructor.name !== 'FormData') {\n            if (typeof config.body !== 'string') {\n                config.body = JSON.stringify(config.body);\n            }\n\n            // add the json header (if not already)\n            if (typeof config?.headers?.['Content-Type'] === 'undefined') {\n                config.headers = Object.assign({}, config.headers, {\n                    'Content-Type': 'application/json',\n                });\n            }\n        }\n\n        // add Accept-Language header (if not already)\n        if (typeof config?.headers?.['Accept-Language'] === 'undefined') {\n            config.headers = Object.assign({}, config.headers, {\n                'Accept-Language': this.lang,\n            });\n        }\n\n        // check if Authorization header can be added\n        if (\n            // has stored token\n            this.authStore?.token &&\n            // auth header is not explicitly set\n            (typeof config?.headers?.Authorization === 'undefined')\n        ) {\n            let authType = 'Admin';\n            if (typeof (this.authStore.model as any)?.verified !== 'undefined') {\n                authType = 'User'; // admins don't have verified\n            }\n\n            config.headers = Object.assign({}, config.headers, {\n                'Authorization': (authType + ' ' + this.authStore.token),\n            });\n        }\n\n        // handle auto cancelation for duplicated pending request\n        if (config.params?.$autoCancel !== false) {\n            const cancelKey = config.params?.$cancelKey || ((config.method || 'GET') + path);\n\n            // cancel previous pending requests\n            this.cancelRequest(cancelKey);\n\n            const controller = new AbortController();\n            this.cancelControllers[cancelKey] = controller;\n            config.signal = controller.signal;\n        }\n        // remove the special cancellation params from the other valid query params\n        delete config.params?.$autoCancel;\n        delete config.params?.$cancelKey;\n\n        // build url + path\n        let url = this.buildUrl(path);\n\n        // serialize the query parameters\n        if (typeof config.params !== 'undefined') {\n            const query = this.serializeQueryParams(config.params)\n            if (query) {\n                url += (url.includes('?') ? '&' : '?') + query;\n            }\n            delete config.params;\n        }\n\n        if (this.beforeSend) {\n            config = Object.assign({}, this.beforeSend(url, config));\n        }\n\n        // send the request\n        return fetch(url, config)\n            .then(async (response) => {\n                let data : any = {};\n\n                try {\n                    data = await response.json();\n                } catch (_) {\n                    // all api responses are expected to return json\n                    // with the exception of the realtime event and 204\n                }\n\n                if (this.afterSend) {\n                    data = this.afterSend(response, data);\n                }\n\n                if (response.status >= 400) {\n                    throw new ClientResponseError({\n                        url:      response.url,\n                        status:   response.status,\n                        data:     data,\n                    });\n                }\n\n                return data;\n            }).catch((err) => {\n                if (err instanceof ClientResponseError) {\n                    throw err; // rethrow\n                }\n\n                // wrap any other error\n                throw new ClientResponseError(err);\n            });\n    }\n\n    /**\n     * Builds a full client url by safely concatenating the provided path.\n     */\n    buildUrl(path: string): string {\n        let url = this.baseUrl + (this.baseUrl.endsWith('/') ? '' : '/');\n        if (path) {\n            url += (path.startsWith('/') ? path.substring(1) : path);\n        }\n        return url;\n    }\n\n    /**\n     * Serializes the provided query parameters into a query string.\n     */\n    private serializeQueryParams(params: {[key: string]: any}): string {\n        const result: Array<string> = [];\n        for (const key in params) {\n            if (params[key] === null) {\n                // skip null query params\n                continue;\n            }\n\n            const value = params[key];\n            const encodedKey = encodeURIComponent(key);\n\n            if (Array.isArray(value)) {\n                // \"repeat\" array params\n                for (const v of value) {\n                    result.push(encodedKey + \"=\" + encodeURIComponent(v));\n                }\n            } else if (value instanceof Date) {\n                result.push(encodedKey + \"=\" + encodeURIComponent(value.toISOString()));\n            } else if (typeof value !== null && typeof value === 'object') {\n                result.push(encodedKey + \"=\" + encodeURIComponent(JSON.stringify(value)));\n            } else {\n                result.push(encodedKey + \"=\" + encodeURIComponent(value));\n            }\n        }\n\n        return result.join('&');\n    }\n}\n"],"names":["atobPolyfill","ClientResponseError","_super","errData","_this","this","call","url","status","data","isAbort","originalError","Error","constructor","DOMException","name","message","_a","__extends","prototype","toJSON","__assign","atob","a","Buffer","from","toString","JWT","getPayload","token","base64","decodeURIComponent","split","map","c","charCodeAt","slice","join","JSON","parse","e","isExpired","expirationThreshold","payload","Object","keys","length","exp","Date","now","BaseAuthStore","baseToken","baseModel","_onChangeCallbacks","defineProperty","get","save","model","triggerChange","clear","onChange","callback","push","i","splice","_i","BaseModel","load","id","created","updated","clone","stringify","export","assign","Record","entries","_b","key","value","User","email","verified","lastResetSentAt","lastVerificationSentAt","profile","Admin","avatar","LocalAuthStore","storageKey","fallback","_storageGet","_storageSet","_storageRemove","window","localStorage","rawValue","getItem","normalizedVal","setItem","removeItem","BaseService","client","Settings","getAll","queryParams","send","method","params","then","responseData","update","bodyParams","body","ListResult","page","perPage","totalItems","totalPages","items","BaseCrudService","_getFullList","basePath","batchSize","result","request","__awaiter","_getList","list","castedList","concat","item","decode","_getOne","encodeURIComponent","_create","_update","_delete","CrudService","getFullList","baseCrudPath","getList","getOne","create","delete","Admins","authResponse","admin","authStore","authViaEmail","password","headers","Authorization","bind","refresh","requestPasswordReset","confirmPasswordReset","passwordResetToken","passwordConfirm","Users","user","listAuthMethods","emailPassword","authProviders","Array","isArray","authViaOAuth2","provider","code","codeVerifier","redirectUrl","requestVerification","confirmVerification","verificationToken","requestEmailChange","newEmail","confirmEmailChange","emailChangeToken","SchemaField","type","system","required","unique","options","Collection","listRule","viewRule","createRule","updateRule","deleteRule","schema","field","Collections","import","collections","deleteMissing","Records","collectionIdOrName","getFileUrl","record","filename","parts","baseUrl","replace","URLSearchParams","includes","SubCrudService","sub","LogRequest","auth","ip","referer","userAgent","meta","Logs","getRequestsList","getRequest","getRequestsStats","Realtime","apply","arguments","clientId","eventSource","subscriptions","subscribe","subscription","removeEventListener","msgEvent","connect","submitSubscriptions","sent","unsubscribe","removeSubscriptionListeners","disconnect","addSubscriptionListeners","addEventListener","connectHandler","lastEventId","EventSource","buildUrl","close","Client","lang","cancelControllers","admins","users","records","logs","settings","realtime","cancelRequest","cancelKey","abort","cancelAllRequests","k","path","reqConfig","config","_c","_d","authType","_e","_f","$autoCancel","_g","$cancelKey","controller","AbortController","signal","_h","_j","query","serializeQueryParams","beforeSend","fetch","response","json","afterSend","catch","err","endsWith","startsWith","substring","encodedKey","value_1","v","toISOString"],"mappings":"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"}